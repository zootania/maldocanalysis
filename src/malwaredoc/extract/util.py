"""extract package utilities."""


from typing import Any, Dict
from filetype.types import Type, TYPES
from filetype.types.archive import Rar


def convert_string_to_attribute_name(name: str) -> str:
    """
    Convert a string to a dataclass attribute.
    Args:
        name: string to convert.

    Returns: lowercase string with _ instead of spaces.

    """
    return name.replace(" ", "_").lower()


def hex_bytes_validator(val: Any) -> bytes:
    if isinstance(val, bytes):
        return val
    elif isinstance(val, bytearray):
        return bytes(val)
    elif isinstance(val, str):
        return bytes.fromhex(val)
    raise ValueError(f"Could not parse bytes of {val}.")


def convert_type_to_string(t: Type) -> str:
    return type(t).__name__


def type_validator(val: Any) -> Type:
    if isinstance(val, Type):
        return val
    elif isinstance(val, str):
        for t in TYPES:
            if convert_type_to_string(t) == val:
                return t
    raise ValueError(f"Could not parse Type of {val}")
    
