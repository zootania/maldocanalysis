"""Extraction tools for rtf files."""


from pathlib import Path
from typing import List, Optional

import chardet
from oletools.rtfobj import RtfObjParser
from striprtf.striprtf import rtf_to_text

from malwaredoc.data.base import Base
from malwaredoc.data.types import HexBytes


class RtfAnalysisResult(Base):
    start: Optional[int]
    end: Optional[int]
    hexdata: Optional[HexBytes]
    rawdata: Optional[HexBytes]
    is_ole: Optional[bool]
    oledata: Optional[HexBytes]
    format_id: Optional[int]
    class_name: Optional[str]
    oledata_size: Optional[int]
    is_package: Optional[bool]
    olepkgdata: Optional[HexBytes]
    filename: Optional[str]
    src_path: Optional[str]
    temp_path: Optional[str]
    clsid: Optional[str]
    clsid_desc: Optional[str]


def analyze_rtf(path: Path) -> List[RtfAnalysisResult]:
    """Analyze rtf file.

    Args:
        path (Path): path to rtf.

    Returns:
        List[RtfAnalysisResult]: result of rtf analysis.
    """
    parser = RtfObjParser(open(path, "rb").read())
    parser.parse()
    return [
        RtfAnalysisResult(
            start=obj.start,
            end=obj.end,
            hexdata=None,  # obj.hexdata,
            rawdata=None,  # obj.rawdata,
            is_ole=obj.is_ole,
            oledata=None,  # obj.oledata,
            format_id=obj.format_id,
            class_name=str(obj.class_name),
            oledata_size=obj.oledata_size,
            is_package=obj.is_package,
            olepkgdata=None,  # obj.olepkgdata,
            filename=obj.filename,
            src_path=obj.src_path,
            temp_path=obj.temp_path,
            clsid=obj.clsid,
            clsid_desc=obj.clsid_desc,
        )
        for obj in parser.objects
    ]


def extract_raw_rtf(path: Path) -> str:
    with open(path, "rb") as f:
        raw = f.read()
        # encoding = chardet.detect(raw)["encoding"]
        # TODO: Fix encoding, automatically detect and also have a fallback
        return raw.decode(encoding="latin1").replace("\x00", "")


def extract_text_rtf(path: Path) -> str:
    """
    Extract text from rtf file.
    Args:
        path: path to rtf file.

    Returns:
        text as string.
    """
    raw = extract_raw_rtf(path)
    return rtf_to_text(raw, encoding="latin1")
