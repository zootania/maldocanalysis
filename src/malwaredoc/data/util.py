"""Utilities for dataclasses."""
from typing import Any, Dict, Tuple


def flatten_dict(d: Dict, parent_key: str = "", sep: str = ".") -> Dict[str, Any]:
    """
    Flatten a dictionary.
    Args:
        d: dictionary.
        parent_key: key or parent variable (for recursive calls).
        sep: seperator to use.

    Returns:
        flatten dictionary

    """
    items = []
    for k, v in d.items():
        new_key = parent_key + sep + k if parent_key else k
        if isinstance(v, dict):
            items.extend(flatten_dict(v, new_key, sep=sep).items())
        else:
            items.append((new_key, v))
    return dict(items)


def dict_info(d: Dict) -> Tuple[int, bool]:
    """
    Check max depth of dictionary and whether values contain lists.
    Args:
        d: dictionary.

    Returns:
        (max_depth, has_lists)
    """

    def dict_depth(d, depth=0):
        if not isinstance(d, dict) or not d:
            return depth
        return max(dict_depth(v, depth + 1) for k, v in d.items())

    def has_list(d):
        if isinstance(d, list):
            return True
        return any(has_list(v) for v in d.values()) if isinstance(d, dict) else False

    max_depth = dict_depth(d)
    contains_list = has_list(d)
    return max_depth, contains_list
