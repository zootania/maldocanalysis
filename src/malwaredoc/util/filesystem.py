import json
import os
import pathlib
import shutil
from typing import Any, List, Optional, Set, Tuple, Type, TypeVar

from malwaredoc.data.base import Base


def get_all_files_in_dir_and_subdirs(path_to_dir: pathlib.Path) -> List[pathlib.Path]:
    """
    Get all the relatives paths to files in directory and its subdirectories.
    Args:
        path_to_dir: initial directory.

    Returns: list of all files.

    """
    filenames = []
    root = path_to_dir.resolve()
    for path, subdirs, files in os.walk(str(root.absolute())):
        filenames.extend(pathlib.Path(path, name) for name in files)
    return filenames


def delete_all_files(paths: List[pathlib.Path]) -> None:
    """Delete all files.

    Args:
        paths (pathlib.Path): path to files.
    """
    for path in paths:
        os.remove(path)


def delete_all_files_and_sub_folders(path: pathlib.Path) -> None:
    """
    Delete dir and all sub-dirs.
    Args:
        path: path to dir.

    Returns:
        None

    """
    if path.is_dir() or path.is_file():
        shutil.rmtree(path)


def write_model_to_file(model: Base, path: pathlib.Path) -> None:
    """
    Write model to file.
    Args:
        model: model to write to file.
        path: path to json file.

    Returns:
        None

    """
    json_obj = model.model_dump_json(indent=4).encode(encoding="utf-8")
    with open(path, "wb") as outfile:
        outfile.write(json_obj)


T = TypeVar("T", bound=Base)


def load_dict_from_file(path: pathlib.Path) -> dict:
    with open(path, "rb") as file:
        return json.loads(file.read())


def load_model_from_file(model: Type[T], path: pathlib.Path) -> T:
    """
    Load specific model from a json file.
    Args:
        model: model class.
        path: path to file.

    Returns:
        Base: parsed model.

    """
    with open(path, "r", encoding="utf-8") as json_file:
        data = json.load(json_file)
    return model.model_validate(data)


def get_file_path(path: pathlib.Path) -> pathlib.Path:
    """Get absolute file path."""
    return path.resolve().absolute()


def save_dict_to_file(d: Any, path: pathlib.Path) -> None:
    json_obj = json.dumps(d, indent=4)
    with open(path, "w") as outfile:
        outfile.write(json_obj)


def create_dir(path: pathlib.Path) -> None:
    """Create path to file if does not exist."""
    if not os.path.exists(path):
        os.makedirs(path)


class TempFolderProvider:
    """Provides a temp folder path when required."""

    def __init__(self, base_dir: pathlib.Path, max_folders: int = 100) -> None:
        self.base_dir: pathlib.Path = base_dir
        self.available: Set[int] = set(range(1, max_folders + 1))

    def reserve_folder(self) -> Tuple[Optional[pathlib.Path], int]:
        """Reserve a temp folder.

        Returns:
            Tuple[Optional[pathlib.Path], int]: path to folder to use and reservation number.
        """
        if len(self.available) == 0:
            return None, -1
        folder_number = min(self.available)
        folder = self.base_dir / f"tmp_{str(folder_number)}"
        self.available.remove(folder_number)
        return folder.resolve(), folder_number

    def release_folder(self, number: int) -> None:
        """Release a reserve folder."""
        self.available.add(number)
