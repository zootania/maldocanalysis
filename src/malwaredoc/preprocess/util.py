"""Utility methods for preprocessing."""
import re
from typing import Any, Optional

import pandas as pd


def convert_to_byte(size: Any) -> Optional[int]:
    """
    Convert a file size to bytes.
    Args:
        size: file size.

    Returns:
        file size in bytes.
    """
    if isinstance(size, str):
        _conversion_map = {"B": 1, "KB": 1024, "MB": 1048576, "GB": 1073741824}
        size_float = float(re.findall(r"\d+(?:\.\d+)?", size)[0])
        for key, val in _conversion_map.items():
            if key in size:
                size_float = size_float * val
        return int(size_float)
    else:
        try:
            return int(size)
        except Exception:
            return None


def convert_string_to_float(text: str) -> float:
    try:
        return float(text) if text else 0.0
    except ValueError:
        print(f"Failed to parse float from: {text}")
        return 0.0


def describe_dataframe(df: pd.DataFrame) -> None:
    """
    Describe dataframe columns.
    Args:
        df: dataframe.

    Returns:
        None, prints the output.
    """
    for column in df.columns:
        name = column
        dtype = df[column].dtype
        nunique = df[column].nunique()
        print(f"Column: {name}, Type: {dtype}, Unique Values: {nunique}")
        if nunique < 50:
            value_counts = df[column].value_counts()
            for value, count in value_counts.items():
                print(f"\tValue: {value}, Count: {count}")
