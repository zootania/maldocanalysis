import pandas as pd
from sklearn.preprocessing import MinMaxScaler, OneHotEncoder


def preprocess_df(df: pd.DataFrame) -> pd.DataFrame:
    """
    Automatically preprocess columns in a dataframe.
    Args:
        df: dataframe.

    Returns:
        dataframe with fit-transformed columns.

    """
    # Create a copy of the input dataframe
    df_copy = df.copy()
    df_copy.reset_index(inplace=True, drop=True)  # required
    # Identify the string columns
    str_cols = df_copy.select_dtypes(include="object").columns

    # Check if both None and 'None' exist in any columns.

    for col in str_cols:
        if df_copy[col].isnull().any() and (df_copy[col] == "None").any():
            df_copy[col] = df_copy[col].replace("None", None)

    # One-hot encode the string columns
    encoder = OneHotEncoder(sparse=False)
    encoded_cols = encoder.fit_transform(df_copy[str_cols])
    encoded_cols = pd.DataFrame(encoded_cols, columns=encoder.get_feature_names_out(str_cols))

    # Drop the original string columns and add the encoded columns
    df_copy = df_copy.drop(str_cols, axis=1)

    df_copy = pd.concat([df_copy, encoded_cols], axis=1)

    # Identify the numerical columns
    num_cols = df_copy.select_dtypes(include="number").columns

    bool_cols = df_copy.select_dtypes(include="bool").columns

    df_copy[bool_cols] = df_copy[bool_cols].replace({True: 1, False: 0})

    # Scale the numerical columns using a MinMax scaler
    scaler = MinMaxScaler()
    df_copy[num_cols] = scaler.fit_transform(df_copy[num_cols])
    df_copy.set_index(df.index, inplace=True, drop=True)
    return df_copy
