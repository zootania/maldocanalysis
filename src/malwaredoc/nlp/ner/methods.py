"""Tools to hand named entities."""
from enum import Enum
from typing import List

from dotenv import load_dotenv

load_dotenv()
from transformers import AutoModelForTokenClassification, AutoTokenizer, pipeline

from malwaredoc.data.base import Base

_tokenizer = AutoTokenizer.from_pretrained("dslim/bert-large-NER")
_NER_MODEL = AutoModelForTokenClassification.from_pretrained("dslim/bert-large-NER")


class EntityType(str, Enum):
    OTHER = "O"
    MISC = "MISC"
    PER = "PER"
    ORG = "ORG"
    LOC = "LOC"


class NamedEntity(Base):
    entity_type: EntityType
    score: float
    word: str


def _extract_entities(text: str) -> list[NamedEntity]:
    nlp = pipeline("ner", model=_NER_MODEL, tokenizer=_tokenizer, grouped_entities=True)
    ner_strings = nlp(text)
    return [
        NamedEntity(entity_type=EntityType(ner["entity_group"]), score=ner["score"], word=ner["word"])
        for ner in ner_strings
    ]


def _select_entities(
    entities: list[NamedEntity], permitted_entities: list[EntityType], threshold: float = 0.8, min_word_length: int = 3
) -> list[NamedEntity]:
    return [
        ner
        for ner in entities
        if ner.entity_type in permitted_entities and ner.score >= threshold and len(ner.word) >= min_word_length
    ]


def analyze_ner(
    text: str,
    threshold: float = 0.8,
    permitted_entities: List[EntityType] = None,
    min_word_length: int = 3,
) -> List[NamedEntity]:
    """
    Analyze string for named entities.
    Args:
        text: text to analyze.
        threshold: minimum score to accept [0,1]
        permitted_entities: type of entities to return.
        min_word_length: minimum length of words to consider.

    Returns:
        List of Named-Entities

    """
    if text:
        if not permitted_entities:
            permitted_entities = list(EntityType)
        entities = _extract_entities(text)
        return _select_entities(
            entities=entities,
            permitted_entities=permitted_entities,
            threshold=threshold,
            min_word_length=min_word_length,
        )
    return []
