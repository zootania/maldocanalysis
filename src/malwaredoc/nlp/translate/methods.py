from langchain.llms.base import LLM
from langchain.text_splitter import RecursiveCharacterTextSplitter

from malwaredoc.nlp.translate.models import get_model_for_language


def _translate(text: str, llm: LLM = None, max_splits=10) -> str:
    """
    Translate text using given LLM.
    Args:
        text: text to translate.
        llm: llm to use for translation.
        max_splits: max splits to translate, set to None if whole text should be translated.

    Returns:
        translated text as string.

    """
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=400, chunk_overlap=0, length_function=len, keep_separator=True
    )
    parts = text_splitter.split_text(text)
    if max_splits:
        translated_parts = [llm(parts[part_index]) for part_index in range(min(len(parts), max_splits))]
    else:
        translated_parts = [llm(part) for part in parts]
    return "".join(translated_parts)


def translate_to_english(text: str, lang_id: str, **kwargs) -> str:
    """
    Translate text to english.
    Args:
        text: text to translate.
        lang_id: language id of the text.
        **kwargs: additional arguments for translation.

    Returns:
        text translated to english.

    """
    if lang_id:
        if model := get_model_for_language(lang_id=lang_id):
            return _translate(text=text, llm=model, **kwargs)
    return ""
