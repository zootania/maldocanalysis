from typing import List, Tuple

import pytest

from malwaredoc.extract.features import (
    IPData,
    IPType,
    _extract_ips,
    _extract_base64,
    _extract_base32,
    Base64Data,
    Base32Data,
)


@pytest.mark.parametrize(
    "test_data",
    [
        (
            "The IPv4 address is 192.168.1.1",
            [IPData(ip="192.168.1.1", type=IPType.IPV4)],
        ),
        (
            "The IPv6 address is 2001:0db8:85a3:0000:0000:8a2e:0370:7334",
            [IPData(ip="2001:0db8:85a3:0000:0000:8a2e:0370:7334", type=IPType.IPV6)],
        ),
        (
            "The IPv4 address is 192.168.1.1 and the IPv6 address is 2001:0db8:85a3:0000:0000:8a2e:0370:7334",
            [
                IPData(ip="192.168.1.1", type=IPType.IPV4),
                IPData(ip="2001:0db8:85a3:0000:0000:8a2e:0370:7334", type=IPType.IPV6),
            ],
        ),
        ("No IP addresses here", []),
        ("Invalid IP addresses 999.9A9.999.999 and zzzz::zzzz", []),
    ],
)
def test_extract_ips(test_data: Tuple[str, List[IPData]]):
    string, result = test_data
    assert _extract_ips(string) == result


@pytest.mark.parametrize(
    "input_string, contains_output",
    [
        (
            "This is a test string with SGVsbG8gV29ybGQ= base64 encoded string.",
            [Base64Data(raw="SGVsbG8gV29ybGQ=", decoded="Hello World")],
        ),
        (
            "This is another test string with Tm8gYmFzZTY0IGVuY29kZWQgc3RyaW5nIGhlcmU= and U29tZSBtb3JlIHRleHQ= base64 encoded strings.",
            [
                Base64Data(
                    raw="Tm8gYmFzZTY0IGVuY29kZWQgc3RyaW5nIGhlcmU=",
                    decoded="No base64 encoded string here",
                ),
                Base64Data(raw="U29tZSBtb3JlIHRleHQ=", decoded="Some more text"),
            ],
        ),
    ],
)
def test_extract_base64_strings(input_string: str, contains_output: List[Base64Data]):
    assert set(contains_output).issubset(set(_extract_base64(input_string)))


@pytest.mark.parametrize(
    "input_string, contains_output",
    [
        (
            "This is a test string with JBSWY3DPEB3W64TMMQQQ==== base32 encoded string.",
            [Base32Data(raw="JBSWY3DPEB3W64TMMQQQ====", decoded="Hello world!")],
        ),
        (
            "This is another test string with JVQW4IDJOMQGS3THO5UWYIDUNBSSA5DIMUQHG3TJ base32 encoded strings.",
            [
                Base32Data(
                    raw="JVQW4IDJOMQGS3THO5UWYIDUNBSSA5DIMUQHG3TJ",
                    decoded="Man is ingwil the the sni",
                )
            ],
        ),
    ],
)
def test_extract_base32_strings(input_string: str, contains_output: List[Base32Data]):
    assert set(contains_output).issubset(set(_extract_base32(input_string)))
